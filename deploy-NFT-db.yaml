parameters:
  - name: environment
    type: string
  - name: azureSubscription
    type: string
  - name: enabled
    type: boolean

jobs:
- deployment: DeployNFTDB
  displayName: NFT Database Deployment
  dependsOn: DeployInfra
  environment: ${{parameters.environment}}
  condition: and(succeeded(), ${{parameters.enabled}})
  strategy:
    runOnce:
      deploy:
        steps:
          - checkout: self
            submodules: true
          - task: AzureCLI@2
            name: InfraDB
            displayName: Deploy Bicep Template
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                az deployment group create \
                --resource-group $(resourceGroupName) \
                --template-file pipelines/infrastructure/nft-db.bicep \
                --parameters serverName=$(env)-analytics-u-uks-sql \
                --parameters administratorLogin=$(sqlAdminLogin) \
                --parameters administratorLoginPassword=$(sqlAdminLoginPassword)
          - task: AzureCLI@2
            displayName: 'Configure Azure SQL Firewall'
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                agentIp=$(curl -s https://api.ipify.org)
                az sql server firewall-rule create --resource-group $(resourceGroupName) --server $(env)-analytics-u-uks-sql --name AllowAzureDevOpsAgent --start-ip-address $agentIp --end-ip-address $agentIp

          - script: |
              sudo apt-get update
              sudo apt-get install -y mssql-tools unixodbc-dev
              echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
              source ~/.bashrc
            displayName: 'Install SQL Tools'

          - script: |
              sudo apt install unzip
            displayName: 'Install Unzip'

          - script: |
              wget -q https://go.microsoft.com/fwlink/?linkid=2134311 -O sqlpackage.zip
              unzip sqlpackage.zip -d ./sqlpackage
              sudo mv ./sqlpackage /opt/
              echo 'export PATH="$PATH:/opt/sqlpackage"' >> ~/.bashrc
              source ~/.bashrc
            displayName: 'Install SQL Package'

          - task: AzureCLI@2
            displayName: 'Drop existing Azure SQL Database if it exists'
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Replace with your database and server names
                dbName='Carelink'
                serverName='$(env)-analytics-u-uks-sql.database.windows.net'
                login='$(sqlAdminLogin)'
                password='$(sqlAdminLoginPassword)'

                # Install sqlcmd
                echo "Installing Sqlcmd"
                curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
                curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
                sudo apt-get update
                sudo apt-get install mssql-tools18 unixodbc-dev

                # Login to Azure SQL Server using the sqlcmd utility and drop the database if it exists
                echo "Attempting to drop database if it exists..."
                sqlcmd -S $serverName -U $login -P $password -Q "DROP DATABASE IF EXISTS [$dbName]"
         
          - task: AzureCLI@2
            displayName: 'Import DB from backpac'
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                sqlpackage /a:Import /tsn:$(env)-analytics-u-uks-sql.database.windows.net /tdn:Carelink /tu:$(sqlAdminLogin) /tp:$(sqlAdminLoginPassword) /sf:pipelines/environments/nft/Carelink-2023-12-21-16-40-test-data-for-NFT-testing.bacpac
